//以“//”开头的注释，不会编译到css文件当中，/**/以“/**/”包裹的注释会被编译到css文件夹中
//注释11111
/*注释222222，会显示*/

//声明变量（一个属性的值，直接引用）
@color:rgb(2, 255, 2);
//声明变量（一个属性名，用{}引用）
@m:margin;
@bg:background-color;
//声明变量（一个选择器，用{}引用）
@class1:.le11;

//less混合,把相同的属性放到一个变量里面，然后在需要的样式表里面调用（类似于声明变量，变量名.hunhe）
//普通混合，不带参数。
//还有带参数的混合，用逗号隔开.hunhe（@w，@h，@bc），这个不叫函数，叫mix in
//在.hunhe（）调用的时候，如果只想给它指定某一个参数，如只给@bc一个红色，可以在调用时这么写
//.hunhe(@bc:red);命名参数
//在下面调用.hunhe（@w，@h，@bc）的时候，如果没有写参数，可以使用默认值
//.hunhe（@w:10px，@h:10px，@bc:green）带默认值的混合

// .hunhe(@w,@h,@bc){
//     width: @w;
//     height: @h;
//     @{bg}:@bc;
// }

//还可以在css文件夹里面写一个单独文件hunhe.less，把这个.hunhe(@w,@h,@bc){}放到hunhe.less中
//在这里通过@import"css/hunhe.less"调用
@import "./hunhe.less";

.le1 {//这里写成这个样式，然后将这个文件的文件夹放到koala里面生成le2.css，然后摘html中还是引用le2.css
    width: 300px;
    height: 300px;
    .bo(1px,solid,red);//在hunhe中定义的bo，类似于混合，这里向hunhe里的bo传递了三个参数
    @{m}: 0 auto;
    @{class1} {//相当于".le11"
        .hunhe(100px,100px,green);//调用混合的方法（直接写）
        //@{bg}: @color;/*@color就是在上面定义的变量*/
    }
    .le12{
        .hunhe(100px,100px,blue);//调用混合的方法（直接写）
        //@{bg}: rgb(84, 12, 94);
        &:hover{//这里必须用&（&符号表示以上的所有选择器）符号，否则就会认为是父子选择器，中间会有一个空格
            @{bg}: rgb(165, 236, 33);

        }
    }
    //继承一个样式
    .le13:extend(.in){
        
    }
    //可以被多个类继承
    .le14{
        &:extend(.in all);
        
    }
}
